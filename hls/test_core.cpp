#include <stdio.h>
#include "core.h"

#define NUM_SAMPLES 3

const float input[NUM_SAMPLES][INPUT_SIZE] = {
		{  1.0200e+00, -9.7000e-01,  3.9000e-02,  4.0791e-01,  3.8750e-01,
		          2.8865e-01,  1.5900e+00, -3.6000e-01,  5.8650e-01,  5.6652e-01,
		          9.5000e-01,  5.1847e-01, -4.0000e-02, -1.8100e+00, -4.7725e-01,
		          4.9297e-01,  8.3750e-01,  4.3256e-01,  7.0710e+01, -2.4950e+02,
		         -2.2441e+01,  6.3077e+01,  2.7077e+01,  4.3705e+01,  2.7337e+02,
		         -2.6333e+02,  7.9735e+00,  1.1816e+02,  5.1778e+01,  7.5204e+01,
		          1.8905e+02, -2.6107e+02, -2.5219e+01,  9.7192e+01,  5.0713e+01,
		          6.7856e+01},
		{2.7000e-01, -2.0000e-01,  1.3750e-02,  1.2247e-01,  2.2250e-01,
		          1.0844e-01,  3.5000e-01, -2.7000e-01,  7.3750e-02,  1.5127e-01,
		          1.8750e-01,  1.2025e-01,  1.7000e-01, -2.8000e-01, -6.5250e-02,
		          1.1041e-01,  1.7250e-01,  9.2250e-02,  4.9850e+01, -5.8070e+01,
		         -1.9844e+01,  2.5640e+01,  3.5660e+01,  2.0699e+01,  1.1155e+02,
		         -1.2077e+02, -4.3960e+01,  5.7641e+01,  7.7215e+01,  4.6109e+01,
		          1.0461e+02, -1.2231e+02,  7.6972e+00,  5.3270e+01,  8.2600e+01,
		          4.2819e+01},
		  {3.4000e-01, -2.7000e-01,  3.3000e-02,  1.2522e-01,  1.7250e-01,
		          9.2750e-02,  7.1000e-01, -8.0000e-01,  6.2500e-02,  3.1187e-01,
		          1.9750e-01,  2.1625e-01,  8.3000e-01, -3.3000e-01, -8.2500e-03,
		          1.8534e-01,  2.0250e-01,  1.2534e-01,  1.9188e+02, -1.4346e+02,
		          3.7745e+00,  4.6417e+01,  2.3597e+01,  2.7380e+01,  1.4819e+02,
		         -1.3681e+02,  2.8593e+01,  6.0555e+01,  5.4335e+01,  4.4368e+01,
		          6.2650e+01, -6.5440e+01, -7.8455e+00,  2.7080e+01,  3.1202e+01,
		          2.0653e+01}
};

const int action[NUM_SAMPLES] = {
		3, 0, 4
};

int main() {

	stream_io s_axis;
	stream_io m_axis;

	AXIS_IO write_input;
	AXIS_IO read_output;

	for (int i = 0; i < NUM_SAMPLES; i++) {
		for (int j = 0; j < INPUT_SIZE; j++) {
			write_input.data = input[i][j];
			write_input.last = (j == INPUT_SIZE - 1) ? 1 : 0;
			s_axis.write(write_input);
		}

		inference(s_axis, m_axis);

		read_output = m_axis.read();
		printf("Target action: %d; Predicted action: %d\n", action[i], (int)read_output.data);
	}

}
