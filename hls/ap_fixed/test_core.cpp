#include <stdio.h>
#include "core.h"

#define NUM_SAMPLES 5

const fixpt input[NUM_SAMPLES][INPUT_SIZE] = {
		{0.1738, -0.0249, -0.0947, -0.8939, -0.9442, -0.9608, -0.9237, -0.5169,
		        -0.7835,  0.6678,  0.6629,  0.8182, -0.9042, -0.9503, -0.9678, -0.8978,
		        -0.9496, -0.9577, -0.0023, -0.3813,  0.2892, -0.9527, -0.9295, -0.8861,
		        -0.7992, -0.9484, -0.5267,  0.8407,  0.7987,  0.8325, -0.9590, -0.9331,
		        -0.9028, -0.9725, -0.9386, -0.9332, -0.7981, -0.9905, -0.9809, -0.8054,
		        -0.9910, -0.9810, -0.6503,  0.6768,  0.6672, -0.6775,  0.7335,  0.6745,
		        -0.8304, -0.9921, -0.9814},
		{0.2796, -0.0154, -0.1075, -0.9911, -0.9622, -0.9651, -0.9345, -0.5484, -0.7843,
				0.8385,  0.6701,  0.8339, -0.9924, -0.9627, -0.9687, -0.9780, -0.9742,
				-0.9738, -0.0265, -0.0732,  0.0887, -0.9895, -0.9697, -0.9753, -0.8754,
				-0.9259, -0.7383,  0.8409,  0.9014,  0.8153, -0.9902, -0.9728, -0.9742,
				-0.9901, -0.9777, -0.9731, -0.9990, -0.9951, -0.9911, -0.9990, -0.9953,
				-0.9919,  0.8904,  0.0603,  0.0219,  0.9847,  0.1120,  0.0286, -0.9989,
				-0.9955, -0.9929},
		{0.3928, -0.0592, -0.1109, -0.1484,  0.0490, -0.2963,  0.3969, -0.0043,
		        -0.2549,  0.4304, -0.0278,  0.3324, -0.2253,  0.0084, -0.2862, -0.1451,
		         0.1266, -0.2171, -0.1366, -0.0429,  0.0427, -0.6685, -0.6210, -0.4179,
		        -0.4998, -0.7340, -0.3978,  0.6077,  0.6831,  0.1911, -0.6845, -0.6280,
		        -0.4242, -0.7225, -0.6489, -0.5124, -0.9746, -0.9496, -0.9285, -0.9743,
		        -0.9524, -0.9255,  0.8254, -0.3586,  0.0278,  0.9018, -0.3431,  0.0089,
		        -0.9752, -0.9581, -0.9271},
		{0.2519, -0.0304, -0.3516, -0.3442,  0.0833, -0.0125, -0.0628,  0.0143,
		        -0.4547,  0.3703,  0.0079,  0.1184, -0.4107,  0.0649,  0.0202, -0.4861,
		        -0.2160, -0.5618, -0.5537,  0.2218,  0.0527, -0.6502, -0.4884, -0.1990,
		        -0.8052, -0.5592,  0.2333,  0.3708,  0.6961,  0.3226, -0.6544, -0.4938,
		        -0.2615, -0.6274, -0.5257, -0.4052, -0.9237, -0.9409, -0.6182, -0.9290,
		        -0.9431, -0.6368,  0.8376, -0.4082,  0.0187,  0.8726, -0.3972, -0.1566,
		        -0.9372, -0.9408, -0.6524},
		{0.2705, -0.0172, -0.1067, -0.9795, -0.9888, -0.9872, -0.9305, -0.5630,
				-0.8186,  0.8375,  0.6915,  0.8388, -0.9784, -0.9886, -0.9853, -0.9879,
				-0.9865, -0.9846, -0.0279, -0.0738,  0.0863, -0.9919, -0.9691, -0.9974,
				-0.8790, -0.9420, -0.7574,  0.8331,  0.9011,  0.8297, -0.9931, -0.9681,
				-0.9978, -0.9941, -0.9675, -0.9985, -0.9787, -0.9986, -0.9895, -0.9795,
				-0.9985, -0.9897, -0.3192,  0.7006,  0.6499, -0.2185,  0.7631,  0.6614,
				-0.9802, -0.9984, -0.9901}
};

const int action[NUM_SAMPLES] = {
		0, 1, 2, 3, 0
};

int main() {

	stream_io s_axis;
	stream_io m_axis;

	AXIS_IO write_input;
	AXIS_IO read_output;

	for (ap_uint<8> i = 0; i < NUM_SAMPLES; i++) {
		for (ap_uint<8> j = 0; j < INPUT_SIZE; j++) {
			write_input.data = input[i][j];
			write_input.last = (j == INPUT_SIZE - 1) ? 1 : 0;
			s_axis.write(write_input);
		}

		inference_ap_fixed(s_axis, m_axis);

		read_output = m_axis.read();
		printf("Target action: %d; Predicted action: %d\n", action[i], (int)read_output.data);
	}

}
